<?xml version="1.0" encoding="UTF-8"?>

<!-- 日志级别 -->
<!-- TRACE < DEBUG < INFO < WARN < ERROR -->
<!-- 根节点<configuration>，包含下面三个属性： -->
<!-- scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="false" scanPeriod="60 seconds" debug="false">

    <!-- 定义日志文件的存储地址，勿在LogBack的配置中使用相对路径 -->
    <property name="LOG_HOME" value="logs"/>
    <!-- 定义日志上下文的名称 -->
    <contextName>log</contextName>
    <!--控制台日志格式：彩色日志 %颜色() -->
    <!-- 文件日志格式：
        %-5level                日志级别
        %d{yyyy-MM-dd HH:mm:ss} 日期
        %c %logger              类的完整名称
        %M                      method方法名
        %L                      行号
        %thread                 线程名
        %m %msg                 日志信息
        %n                      换行
    -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%yellow(%date{HH:mm:ss.SSS}) %highlight(%-5level) [%green(%-16X{traceId}), %green(%-16X{spanId})] %magenta([%thread]) %cyan(%logger{30}.%method:%line) |%m%n"/>
    <property name="FILE_LOG_PATTERN"
              value="%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%-16X{traceId}, %-16X{spanId}] |%-22thread|%m%n"/>

    <!-- 日志输出格式 -->
    <property name="ENCODE" value="UTF-8"/>

    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${ENCODE}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!-- 日志统一输出 -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <Prudent>true</Prudent>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <!--<FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/%d{yyyy-MM-dd-HH}.%i.log</FileNamePattern>-->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--超过100MB就拆分日志-->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %method 方法名  %L 行数 %msg：日志消息，%n是换行符-->
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODE}</charset>
        </encoder>

        <!-- 此日志文件只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!-- 日志输出级别 -->
    <root level="debug">
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
    </root>

    <!--关闭所有日志系统状态监听接口-->
    <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>

</configuration>


